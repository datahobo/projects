# Now pull it back into the main list
partsList <- rbind(partsList, partFrame)
}
# We need to confirm that there are more parts to index
readMoreParts <- ((partsCount - partsIndexed) > 0)
}
# The final data frame has all of the parts
return(partsList)
}
getBSUserHash <- function (bsUser, bsPass) {
bsLogin <- '/login?'
bsUser <- str_c('u=', bsUser, sep = "", collapse = NULL)
bsPass <- str_c('&p=', bsPass, sep = "", collapse = NULL)
# Now build a temp string
temp <- str_c(bsURLBase, bsLogin, bsUser, bsPass, sep = "",
collapse = NULL)
bsUserHash <- getURL(temp)
# can't figure out how to manipulate it as XML, so I'll do it as a string
bsUserHash <- str_extract(bsUserHash, '>.*<')
bsUserHash <- str_sub(bsUserHash, start = 2L, end = -1L)
bsUserHash <- str_extract(bsUserHash, '>.*<')
bsUserHash <- str_sub(bsUserHash, start = 2L, end = -2L)
return(bsUserHash)
}
getBSSetListXMLByYear <- function (bsAPIKey, bsUserHash, bsYear) {
# This function searches for a specific year, and returns a data frame
# of all the sets in that year
bsSearch <- '/search?'
bsAPI <- str_c('apiKey=', bsAPIKey, sep = "", collapse = NULL)
bsUserHash <- str_c('&userHash=', bsUserHash, sep = "", collapse = NULL)
bsQuery <- '&query='
bsTheme <- '&theme='
bsSubTheme <- '&subtheme='
bsSetNumber <- '&setNumber='
bsOwned <- '&Owned='
bsWanted <- '&Wanted='
bsYear <- str_c('&year=', as.character(bsYear), sep = "", collapse = NULL)
temp <- str_c(bsURLBase, bsSearch, bsAPI, bsUserHash, bsQuery, bsTheme,
bsSubTheme, bsSetNumber, bsYear, bsOwned, bsWanted,
sep = "", collapse = NULL)
bsSetListByYear <- getURL(temp)
# Now that we have a string, we'll need to convert it to an XML node/tree
bsSetListByYear <- xmlParse(bsSetListByYear)
bsSetListByYear <- getNodeSet(bsSetListByYear, "//r:setData",
namespaces = c(r = 'http://brickset.com/webServices/'))
return(bsSetListByYear)
}
getBSSetListFromXML <- function (bsSetListXML) {
# We're starting with XML
setsCount <- length(bsSetListXML)
setsIndexed <- 0
setsList <- NULL
readMoreSets <- ((setsCount - setsIndexed) > 0)
if (readMoreSets) {
for (i in 1:setsCount) {
# put the set into a separate object to manipulate
setXML <- xmlDoc(bsSetListXML[[i]])
# Now pull out the elements we need, in the right formats
# bsSetID <- as.numeric(unlist(xpathApply(setXML, "//r:setID", xmlValue,
#                                        namespaces = c(r = 'http://brickset.com/webServices/'))))
bsID <- as.character(unlist(xpathApply(setXML, "//r:number", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/'))))
bsIDV <- as.character(unlist(xpathApply(setXML, "//r:numberVariant", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/'))))
setID <- str_c(bsID, bsIDV, sep = "-", collapse = NULL)
setName <- as.character(unlist(xpathApply(setXML, "//r:setName", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/'))))
year <- as.numeric(unlist(xpathApply(setXML, "//r:year", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/'))))
theme <- as.character(unlist(xpathApply(setXML, "//r:theme", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/'))))
subTheme <- as.character(unlist(xpathApply(setXML, "//r:subtheme", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/'))))
pieces <- as.numeric(unlist(xpathApply(setXML, "//r:pieces", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/'))))
minifigs <- as.numeric(unlist(xpathApply(setXML, "//r:minifigs", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/'))))
#      thumbnailURL <- as.character(unlist(xpathApply(setXML, "//r:thumbnailURL", xmlValue,
#                                                     namespaces = c(r = 'http://brickset.com/webServices/'))))
#      if(is.na(thumbnailURL)) thumbnailURL = ' '
#      imageURL <- as.character(unlist(xpathApply(setXML, "//r:imageURL", xmlValue,
#                                                 namespaces = c(r = 'http://brickset.com/webServices/'))))
#      if(is.na(imageURL)) imageURL = ' '
bsURL <- as.character(unlist(xpathApply(setXML, "//r:bricksetURL", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/'))))
price <- as.character(unlist(xpathApply(setXML, "//r:USRetailPrice", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/'))))
instructions <- as.character(unlist(xpathApply(setXML, "//r:instructionsAvailable", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/'))))
updated <- as.character(unlist(xpathApply(setXML, "//r:lastUpdated", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/'))))
# Add it to a data frame
setFrame <- data.frame(setID, setName, year, theme, subTheme,
pieces, minifigs,
#                             thumbnailURL, imageURL,
bsURL, price,
instructions, updated)
# Increment the sets counter
setsIndexed <- setsIndexed + 1
# Use it for the identifier in the data frame
rownames(setFrame) <- setsIndexed
# Now pull it back into the main list
setsList <- rbind(setsList, setFrame)
}
readMoreSets <- ((setsCount - setsIndexed) > 0)
}
return(setsList)
}
bsUserHash <- getBSUserHash(bsUserName, bsPassWord)
bsSetList2014 <- getBSSetListXMLByYear(bsAPIKey, bsUserHash, '2014')
bsSetListXML <- bsSetList2014
bsSetList2014 <- getBSSetListFromXML(bsSetList2014)
View(bsSetList2014)
bsSetList2014
getBSSetListFromXML <- function (bsSetListXML) {
# We're starting with XML
setsCount <- length(bsSetListXML)
setsIndexed <- 0
setsList <- NULL
readMoreSets <- ((setsCount - setsIndexed) > 0)
if (readMoreSets) {
for (i in 1:setsCount) {
# put the set into a separate object to manipulate
setXML <- xmlDoc(bsSetListXML[[i]])
# Now pull out the elements we need, in the right formats
bsID <- unlist(xpathApply(setXML, "//r:number", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
bsIDV <- unlist(xpathApply(setXML, "//r:numberVariant", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
setID <- str_c(bsID, bsIDV, sep = "-", collapse = NULL)
setName <- unlist(xpathApply(setXML, "//r:setName", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
year <- unlist(xpathApply(setXML, "//r:year", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
theme <- unlist(xpathApply(setXML, "//r:theme", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
subTheme <- unlist(xpathApply(setXML, "//r:subtheme", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
pieces <- unlist(xpathApply(setXML, "//r:pieces", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
minifigs <- unlist(xpathApply(setXML, "//r:minifigs", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
bsURL <- unlist(xpathApply(setXML, "//r:bricksetURL", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
price <- unlist(xpathApply(setXML, "//r:USRetailPrice", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
instructions <- unlist(xpathApply(setXML, "//r:instructionsAvailable", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
updated <- unlist(xpathApply(setXML, "//r:lastUpdated", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
# Add it to a data frame
setFrame <- data.frame(as.character(setID), as.character(setName), as.numeric(year),
as.character(theme), as.character(subTheme), as.numeric(pieces),
as.numeric(minifigs), as.character(bsURL), as.numeric(price),
as.character(instructions), as.character(updated))
# Increment the sets counter
setsIndexed <- setsIndexed + 1
# Use it for the identifier in the data frame
rownames(setFrame) <- setsIndexed
# Now pull it back into the main list
setsList <- rbind(setsList, setFrame)
}
readMoreSets <- ((setsCount - setsIndexed) > 0)
}
return(setsList)
}
bsUserHash <- getBSUserHash(bsUserName, bsPassWord)
bsSetList2014 <- getBSSetListXMLByYear(bsAPIKey, bsUserHash, '2014')
bsSetListXML <- bsSetList2014
bsSetList2014 <- getBSSetListFromXML(bsSetList2014)
summary(bsSetList2014)
View(bsSetList2014)
getBSSetListFromXML <- function (bsSetListXML) {
# We're starting with XML
setsCount <- length(bsSetListXML)
setsIndexed <- 0
setsList <- NULL
readMoreSets <- ((setsCount - setsIndexed) > 0)
if (readMoreSets) {
for (i in 1:setsCount) {
# put the set into a separate object to manipulate
setXML <- xmlDoc(bsSetListXML[[i]])
# Now pull out the elements we need, in the right formats
bsID <- unlist(xpathApply(setXML, "//r:number", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
bsIDV <- unlist(xpathApply(setXML, "//r:numberVariant", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
setID <- str_c(bsID, bsIDV, sep = "-", collapse = NULL)
setName <- unlist(xpathApply(setXML, "//r:setName", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
year <- unlist(xpathApply(setXML, "//r:year", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
theme <- unlist(xpathApply(setXML, "//r:theme", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
subTheme <- unlist(xpathApply(setXML, "//r:subtheme", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
pieces <- unlist(xpathApply(setXML, "//r:pieces", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
minifigs <- unlist(xpathApply(setXML, "//r:minifigs", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
bsURL <- unlist(xpathApply(setXML, "//r:bricksetURL", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
price <- unlist(xpathApply(setXML, "//r:USRetailPrice", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
instructions <- unlist(xpathApply(setXML, "//r:instructionsAvailable", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
updated <- unlist(xpathApply(setXML, "//r:lastUpdated", xmlValue,
namespaces = c(r = 'http://brickset.com/webServices/')))
# Add it to a data frame
setFrame <- data.frame(setID, setName, year, theme, subTheme, pieces, minifigs,
bsURL, price, instructions, updated, stringsAsFactors = FALSE)
# Increment the sets counter
setsIndexed <- setsIndexed + 1
# Use it for the identifier in the data frame
rownames(setFrame) <- setsIndexed
# Now pull it back into the main list
setsList <- rbind(setsList, setFrame)
}
readMoreSets <- ((setsCount - setsIndexed) > 0)
}
return(setsList)
}
bsUserHash <- getBSUserHash(bsUserName, bsPassWord)
bsSetList2014 <- getBSSetListXMLByYear(bsAPIKey, bsUserHash, '2014')
bsSetListXML <- bsSetList2014
bsSetList2014 <- getBSSetListFromXML(bsSetList2014)
summary(bsSetList2014)
bsSetList <- NULL
for(year in 1970:2014) {
bsSetListByYear <- getBSSetListXMLByYear(bsAPIKey, bsUserHash, as.character(year))
bsSetListByYear <- getBSSetListFromXML(bsSetListByYear)
bsSetList <- rbind(bsSetList, bsSetListByYear)
}
View(bsSetList)
bsSetList$Price <- as.numeric(bsSetList$price)
View(bsSetList)
mean(bsSetList$Price)
bsSetList$Price <- as.numeric(bsSetList$price)
bsSetList$Year <- as.numeric(bsSetList$year)
bsSetList$Pieces <- as.numeric(bsSetList$pieces)
bsSetList$Minifigs <- as.numeric(bsSetList$minifigs)
bsSetList$price <- NULL
bsSetList$year <- NULL
bsSetList$pieces <- NULL
bsSetList$minifigs <- NULL
View(bsSetList)
bsSetListWithPrices <- subset(bsSetList, !(is.na(bsSetList$Price)))
View(bsSetListWithPrices)
setListWithPrices <- subset(bsSetList, !(is.na(bsSetList$Price)))
setListWithPrices <- subset(bsSetList, !(is.na(bsSetList$Price)))
partsList <- NULL
# for(i in nrow(setListWithPrices):1) {
for(i in 100:1) {
rbPartsListBySet <- getRBPartsList(bsSetListWithPrices$setID[i])
partsList <- rbind(rbPartsListBySet, partsList)
}
getRBPartsList <- function (setID) {
# Start with our core string elements
rbSetURL <- str_c(rbURLBase, 'get_set_parts', sep = "", collapse = NULL)
rbAPIParam <- str_c('?key=', rbAPIKey, sep = "", collapse = NULL)
rbSetParam <- str_c('&set=', setID, sep = "", collapse = NULL)
rbFormatParam <- '&format=xml'
rbSetURL <- str_c(rbSetURL, rbAPIParam, rbSetParam, rbFormatParam, sep = "",
collapse = NULL)
# Now get the list from RB
temp <- getURL(rbSetURL)
# Stick it in an XML doc
XML <- xmlParse(temp)
# Extract the list of "part" nodes
parts <- getNodeSet(XML, "//part")
# Some initial counters
partsIndexed <- 0
partsCount <- length(parts)
# Placeholder for the data frame
partsList <- NULL
readMoreParts <- ((partsCount - partsIndexed) > 0)
if (readMoreParts) {
for (i in 1:partsCount) {
# put the part in a separate object to manipulate
partXML <- xmlDoc(parts[[i]])
# Now pull out the elements we need, in the right formats
partID <- as.character(unlist(xpathApply(partXML, "//part_id", xmlValue)))
quantity <- as.numeric(unlist(xpathApply(partXML, "//qty", xmlValue)))
ldrawColorID <- as.numeric(unlist(xpathApply(partXML, "//ldraw_color_id",
xmlValue)))
type <- as.numeric(unlist(xpathApply(partXML, "//type", xmlValue)))
partName <- as.character(unlist(xpathApply(partXML, "//part_name",
xmlValue)))
colorName <- as.character(unlist(xpathApply(partXML, "//color_name",
xmlValue)))
partImageURL <- as.character(unlist(xpathApply(partXML, "//part_img_url",
xmlValue)))
elementID <- as.numeric(unlist(xpathApply(partXML, "//element_id",
xmlValue)))
elementImageURL <- as.character(unlist(xpathApply(partXML,
"//element_img_url",
xmlValue)))
# Create an individual data frame
partFrame <- data.frame(partID, quantity, ldrawColorID, type, partName,
colorName, partImageURL, elementID, elementImageURL)
# Increment the parts counter
partsIndexed <- partsIndexed + 1
# Use it for the identifier in the data frame
rownames(partFrame) <- partsIndexed
# Now pull it back into the main list
partsList <- rbind(partsList, partFrame)
}
# We need to confirm that there are more parts to index
readMoreParts <- ((partsCount - partsIndexed) > 0)
}
# The final data frame has all of the parts
return(partsList)
}
setListWithPrices <- subset(bsSetList, !(is.na(bsSetList$Price)))
partsList <- NULL
# for(i in nrow(setListWithPrices):1) {
for(i in 100:1) {
rbPartsListBySet <- getRBPartsList(bsSetListWithPrices$setID[i])
partsList <- rbind(rbPartsListBySet, partsList)
}
View(rbPartsListBySet)
View(partsList)
getRBPartsList <- function (setID) {
# Start with our core string elements
rbSetURL <- str_c(rbURLBase, 'get_set_parts', sep = "", collapse = NULL)
rbAPIParam <- str_c('?key=', rbAPIKey, sep = "", collapse = NULL)
rbSetParam <- str_c('&set=', setID, sep = "", collapse = NULL)
rbFormatParam <- '&format=xml'
rbSetURL <- str_c(rbSetURL, rbAPIParam, rbSetParam, rbFormatParam, sep = "",
collapse = NULL)
# Now get the list from RB
temp <- getURL(rbSetURL)
# Stick it in an XML doc
XML <- xmlParse(temp)
# Extract the list of "part" nodes
parts <- getNodeSet(XML, "//part")
# Some initial counters
partsIndexed <- 0
partsCount <- length(parts)
# Placeholder for the data frame
partsList <- NULL
readMoreParts <- ((partsCount - partsIndexed) > 0)
if (readMoreParts) {
for (i in 1:partsCount) {
# put the part in a separate object to manipulate
partXML <- xmlDoc(parts[[i]])
# Now pull out the elements we need, in the right formats
partID <- as.character(unlist(xpathApply(partXML, "//part_id", xmlValue)))
quantity <- as.numeric(unlist(xpathApply(partXML, "//qty", xmlValue)))
ldrawColorID <- as.numeric(unlist(xpathApply(partXML, "//ldraw_color_id",
xmlValue)))
type <- as.numeric(unlist(xpathApply(partXML, "//type", xmlValue)))
partName <- as.character(unlist(xpathApply(partXML, "//part_name",
xmlValue)))
colorName <- as.character(unlist(xpathApply(partXML, "//color_name",
xmlValue)))
partImageURL <- as.character(unlist(xpathApply(partXML, "//part_img_url",
xmlValue)))
elementID <- as.numeric(unlist(xpathApply(partXML, "//element_id",
xmlValue)))
elementImageURL <- as.character(unlist(xpathApply(partXML,
"//element_img_url",
xmlValue)))
# Create an individual data frame
partFrame <- data.frame(partID, quantity, ldrawColorID, type, partName,
colorName, partImageURL, elementID, elementImageURL)
# Increment the parts counter
partsIndexed <- partsIndexed + 1
# Use it for the identifier in the data frame
rownames(partFrame) <- partsIndexed
# Now pull it back into the main list
partsList <- rbind(partsList, partFrame)
}
# We need to confirm that there are more parts to index
readMoreParts <- ((partsCount - partsIndexed) > 0)
}
# The final data frame has all of the parts
partsList$setID <- setID
return(partsList)
}
appropriateSets <- subset(bsSetList, !(is.na(bsSetList$Price)) & !(is.na(bsSetList$Pieces)) & !(is.na(bsSetList$Year)))
rm(list = ls(bsSetList2014, bsSetListByYear, bsSetListWithPrices, setListWithPrices))
rm(list = ls('bsSetList2014', 'bsSetListByYear', 'bsSetListWithPrices', 'setListWithPrices'))
rm(bsSetList2014)
rm(bsSetListByYear)
rm(bsSetListWIthPrices)
rm(bsSetListWithPrices)
rm(setListWithPrices)
partsList <- NULL
# for(i in nrow(setListWithPrices):1) {
for(i in 100:1) {
rbPartsListBySet <- getRBPartsList(bsSetListWithPrices$setID[i])
partsList <- rbind(rbPartsListBySet, partsList)
}
partsList <- NULL
# for(i in nrow(setListWithPrices):1) {
for(i in 100:1) {
rbPartsListBySet <- getRBPartsList(appropriateSets$setID[i])
partsList <- rbind(rbPartsListBySet, partsList)
}
View(partsList)
getRBPartsList <- function (setID) {
# Start with our core string elements
rbSetURL <- str_c(rbURLBase, 'get_set_parts', sep = "", collapse = NULL)
rbAPIParam <- str_c('?key=', rbAPIKey, sep = "", collapse = NULL)
rbSetParam <- str_c('&set=', setID, sep = "", collapse = NULL)
rbFormatParam <- '&format=xml'
rbSetURL <- str_c(rbSetURL, rbAPIParam, rbSetParam, rbFormatParam, sep = "",
collapse = NULL)
# Now get the list from RB
temp <- getURL(rbSetURL)
# Stick it in an XML doc
XML <- xmlParse(temp)
# Extract the list of "part" nodes
parts <- getNodeSet(XML, "//part")
# Some initial counters
partsIndexed <- 0
partsCount <- length(parts)
# Placeholder for the data frame
partsList <- NULL
readMoreParts <- ((partsCount - partsIndexed) > 0)
if (readMoreParts) {
for (i in 1:partsCount) {
# put the part in a separate object to manipulate
partXML <- xmlDoc(parts[[i]])
# Now pull out the elements we need, in the right formats
partID <- as.character(unlist(xpathApply(partXML, "//part_id", xmlValue)))
quantity <- as.numeric(unlist(xpathApply(partXML, "//qty", xmlValue)))
ldrawColorID <- as.numeric(unlist(xpathApply(partXML, "//ldraw_color_id",
xmlValue)))
type <- as.numeric(unlist(xpathApply(partXML, "//type", xmlValue)))
partName <- as.character(unlist(xpathApply(partXML, "//part_name",
xmlValue)))
colorName <- as.character(unlist(xpathApply(partXML, "//color_name",
xmlValue)))
partImageURL <- as.character(unlist(xpathApply(partXML, "//part_img_url",
xmlValue)))
elementID <- as.numeric(unlist(xpathApply(partXML, "//element_id",
xmlValue)))
elementImageURL <- as.character(unlist(xpathApply(partXML,
"//element_img_url",
xmlValue)))
# Create an individual data frame
partFrame <- data.frame(partID, quantity, ldrawColorID, type, partName,
colorName, partImageURL, elementID, elementImageURL)
# Increment the parts counter
partsIndexed <- partsIndexed + 1
# Use it for the identifier in the data frame
# rownames(partFrame) <- partsIndexed
# Now pull it back into the main list
partsList <- rbind(partsList, partFrame)
}
# We need to confirm that there are more parts to index
readMoreParts <- ((partsCount - partsIndexed) > 0)
}
# The final data frame has all of the parts
partsList$setID <- setID
return(partsList)
}
partsList <- NULL
# for(i in nrow(setListWithPrices):1) {
for(i in 100:1) {
rbPartsListBySet <- getRBPartsList(appropriateSets$setID[i])
partsList <- rbind(rbPartsListBySet, partsList)
}
View(rbPartsListBySet)
View(appropriateSets)
bsSetList <- NULL
for(year in 1980:2014) {
bsSetListByYear <- getBSSetListXMLByYear(bsAPIKey, bsUserHash, as.character(year))
bsSetListByYear <- getBSSetListFromXML(bsSetListByYear)
bsSetList <- rbind(bsSetList, bsSetListByYear)
}
View(bsSetList)
summary(bsSetList$theme)
bsSetList$theme
table(bsSetList$theme)
# Clean up the numeric fields in the table
bsSetList$Price <- as.numeric(bsSetList$price)
bsSetList$Year <- as.numeric(bsSetList$year)
bsSetList$Pieces <- as.numeric(bsSetList$pieces)
bsSetList$Minifigs <- as.numeric(bsSetList$minifigs)
# Get rid of the extra fields
bsSetList$price <- NULL
bsSetList$year <- NULL
bsSetList$pieces <- NULL
bsSetList$minifigs <- NULL
appropriateSets <- subset(bsSetList, !(is.na(bsSetList$Price)) & !(is.na(bsSetList$Pieces)) & !(is.na(bsSetList$Year)))
aSetsThemes <- table(appropriateSets$theme)
aSetsThemes
aSetsThemes <- sort.list(aSetsThemes, decreasing = TRUE)
aSetsThemes
aSetsThemes <- order(aSetsThemes, decreasing = TRUE)
aSetsThemes
aSetsThemes <- table(appropriateSets$theme)
aSetsThemes
aSetsThemes <- aSetsThemes[order(aSetsThemes)]
aSetsThemes
aSetsThemes <- aSetsThemes[-order(aSetsThemes)]
aSetsThemes
aSetsThemes <- table(appropriateSets$theme)
aSetsThemes <- aSetsThemes[order(-aSetsThemes)]
aSetsThemes
appropriateSets <- subset(bsSetList, !(is.na(bsSetList$Price))
& !(is.na(bsSetList$Pieces)) & !(is.na(bsSetList$Year))
& !(bsSetList$theme == 'Duplo')
)
appropriateSets <- subset(bsSetList, !(is.na(bsSetList$Price))
& !(is.na(bsSetList$Pieces)) & !(is.na(bsSetList$Year))
& bsSetList$theme != 'Duplo' & bsSetList$theme != 'Belville'
& bsSetList$theme != 'Clikits'
)

temp <- dfr_peeronPartsList(setURL)
length(temp)
dfr_peeronPartsList <- function (setIDString) {
print(paste("Running", setIDString))
# Define the URL we're going to get
setURL <- str_peeronPartsListURL(setIDString)
# Now pull the page into an R object
setPartsListPage <- readHTMLTable(setURL)
# Convert it to a data frame - the last table in the list should be what we want
setPartsList <- as.data.frame(setPartsListPage[length(setPartsListPage)])
# if it's a valid setAdd the setNumber to the data frame
if(length(setPartsList) > 0) {
setPartsList$SetID <- setIDString
# Use the function to clean the data frame
setPartsList <- dfr_cleanPeeronPartsList(setPartsList)
print(paste("Cleaned", setIDString))
}
return(setPartsList)
}
partsList <- NULL
for(i in 1:nrow(brickSetsPriced)) {
# Now we can test the new function
# if(brickSetsPriced$pieces[i] > 2) {
tempPartsList <- dfr_peeronPartsList(brickSetsPriced$legoID[i])
if(nrow(tempPartsList) > 0) {
partsList <- rbind(tempPartsList, partsList)
}
print(paste("Getting set in row", i))
# }
}
setPartsListPage <- readHTMLTable(setURL)
setPartsList <- as.data.frame(setPartsListPage[length(setPartsListPage)])
View(setPartsList)
length(setPartsList)
dfr_peeronPartsList <- function (setIDString) {
print(paste("Running", setIDString))
# Define the URL we're going to get
setURL <- str_peeronPartsListURL(setIDString)
# Now pull the page into an R object
setPartsListPage <- readHTMLTable(setURL)
# Convert it to a data frame - the last table in the list should be what we want
setPartsList <- as.data.frame(setPartsListPage[length(setPartsListPage)])
# if it's a valid setAdd the setNumber to the data frame
if(length(setPartsList) > 1) {
setPartsList$SetID <- setIDString
# Use the function to clean the data frame
setPartsList <- dfr_cleanPeeronPartsList(setPartsList)
print(paste("Cleaned", setIDString))
}
return(setPartsList)
}
dfr_peeronPartsList <- function (setIDString) {
# print(paste("Running", setIDString))
# Define the URL we're going to get
setURL <- str_peeronPartsListURL(setIDString)
# Now pull the page into an R object
setPartsListPage <- readHTMLTable(setURL)
# Convert it to a data frame - the last table in the list should be what we want
setPartsList <- as.data.frame(setPartsListPage[length(setPartsListPage)])
# if it's a valid setAdd the setNumber to the data frame
if(length(setPartsList) > 1) {
setPartsList$SetID <- setIDString
# Use the function to clean the data frame
setPartsList <- dfr_cleanPeeronPartsList(setPartsList)
# print(paste("Cleaned", setIDString))
}
return(setPartsList)
}
rm(partsList, setIDString, setPartsList, setPartsListPage, temp, tempPartsList)
rm(setURL)
partsList <- NULL
for(i in 1:nrow(brickSetsPriced)) {
# Now we can test the new function
# if(brickSetsPriced$pieces[i] > 2) {
tempPartsList <- dfr_peeronPartsList(brickSetsPriced$legoID[i])
if(nrow(tempPartsList) > 0) {
partsList <- rbind(tempPartsList, partsList)
}
print(paste("Getting set in row", i))
# }
}
partsList <- NULL
for(i in 1:nrow(brickSetsPriced)) {
# Now we can test the new function
# if(brickSetsPriced$pieces[i] > 2) {
tempPartsList <- dfr_peeronPartsList(brickSetsPriced$legoID[i])
if(length(tempPartsList) > 1) {
partsList <- rbind(tempPartsList, partsList)
}
print(paste("Getting set in row", i))
# }
}
temp <- dfr_peeronPartsList(brickSetsPriced$legoID[1])
setIDString <- brickSetsPriced$legoID[i]
(setIDString) <- brickSetsPriced$legoID[i]
(setIDString <- brickSetsPriced$legoID[i])
(setURL <- str_peeronPartsListURL(setIDString))
(temp <- dfr_peeronPartsList(setURL))
(length(temp))
View(tempPartsList)
partsList <- NULL
for(i in 1:nrow(brickSetsPriced)) {
# Now we can test the new function
# if(brickSetsPriced$pieces[i] > 2) {
tempPartsList <- dfr_peeronPartsList(brickSetsPriced$legoID[i])
if(length(tempPartsList) > 1) {
partsList <- rbind(tempPartsList, partsList)
}
print(paste("Getting set in row", i))
# }
}
View(partsList)
table(partsList$SetID)
View(brickSetsPriced)
setURL <- str_peeronPartsListURL(setIDString)
# Now pull the page into an R object
setPartsListPage <- readHTMLTable(setURL)
# Convert it to a data frame - the last table in the list should be what we want
setPartsList <- as.data.frame(setPartsListPage[length(setPartsListPage)])
View(setPartsList)
dfr_peeronPartsList <- function (setIDString) {
# print(paste("Running", setIDString))
# Define the URL we're going to get
setURL <- str_peeronPartsListURL(setIDString)
# Now pull the page into an R object
setPartsListPage <- readHTMLTable(setURL)
# Convert it to a data frame - the last table in the list should be what we want
setPartsList <- as.data.frame(setPartsListPage[length(setPartsListPage)])
# if it's a valid setAdd the setNumber to the data frame
if(length(setPartsList) > 2) {
setPartsList$SetID <- setIDString
# Use the function to clean the data frame
setPartsList <- dfr_cleanPeeronPartsList(setPartsList)
# print(paste("Cleaned", setIDString))
}
return(setPartsList)
}
rm(setIDString, setPartsList, setPartsListPage)
rm(setURL, temp, tempPartsList)
partsList <- NULL
for(i in 1:nrow(brickSetsPriced)) {
# Now we can test the new function
# if(brickSetsPriced$pieces[i] > 2) {
tempPartsList <- dfr_peeronPartsList(brickSetsPriced$legoID[i])
if(length(tempPartsList) > 1) {
partsList <- rbind(tempPartsList, partsList)
}
print(paste("Getting set in row", i))
# }
}
(setIDString <- brickSetsPriced$legoID[i])
(setURL <- str_peeronPartsListURL(setIDString))
(temp <- dfr_peeronPartsList(setURL))
(length(temp))
library(XML)
library(stringr)
(temp <- dfr_peeronPartsList(setURL))
setPartsList <- as.data.frame(setPartsListPage[length(setPartsListPage)])
setPartsListPage <- readHTMLTable(setURL)
# Convert it to a data frame - the last table in the list should be what we want
setPartsList <- as.data.frame(setPartsListPage[length(setPartsListPage)])
length(setPartsList)
View(setPartsList)
View(setPartsList) > 2
length(setPartsList) > 2
View(partsList)
rm(temp, tempPartsList)
rm(setIDString, setPartsList, setPartsListPage)
rm(setURL)
rm(partsList)
partsList <- NULL
for(i in 1:nrow(brickSetsPriced)) {
# Now we can test the new function
# if(brickSetsPriced$pieces[i] > 2) {
tempPartsList <- dfr_peeronPartsList(brickSetsPriced$legoID[i])
if(length(tempPartsList) > 2) {
partsList <- rbind(tempPartsList, partsList)
}
print(paste("Getting set in row", i))
# }
}
(setIDString <- brickSetsPriced$legoID[i])
(setURL <- str_peeronPartsListURL(setIDString))
setPartsListPage <- readHTMLTable(setURL)
(setPartsList <- as.data.frame(setPartsListPage[length(setPartsListPage)]))
names(setPartsList)[1] != "NULL.V1"
dfr_peeronPartsList <- function (setIDString) {
# print(paste("Running", setIDString))
# Define the URL we're going to get
setURL <- str_peeronPartsListURL(setIDString)
# Now pull the page into an R object
setPartsListPage <- readHTMLTable(setURL)
# Convert it to a data frame - the last table in the list should be what we want
setPartsList <- as.data.frame(setPartsListPage[length(setPartsListPage)])
# if it's a valid setAdd the setNumber to the data frame
validSet <- (length(setPartsList) > 1 &
names(setPartsList)[1] != "NULL.V1")
if(validSet) {
setPartsList$SetID <- setIDString
# Use the function to clean the data frame
setPartsList <- dfr_cleanPeeronPartsList(setPartsList)
# print(paste("Cleaned", setIDString))
return(setPartsList)
} else {
return(NA)
}
}
tempPartsList <- dfr_peeronPartsList(brickSetsPriced$legoID[i])
length(tempPartsList)
partsList <- NULL
for(i in 1:nrow(brickSetsPriced)) {
# Now we can test the new function
# if(brickSetsPriced$pieces[i] > 2) {
tempPartsList <- dfr_peeronPartsList(brickSetsPriced$legoID[i])
if(length(tempPartsList) > 1) {
partsList <- rbind(tempPartsList, partsList)
}
print(paste("Getting set in row", i))
# }
}
library(XML)
library(stringr)
rm(setIDString, setPartsList, setPartsListPage)
rm(tempPartsList, i)
rm(setURL)
partsList <- NULL
for(i in 1:nrow(brickSetsPriced)) {
# Now we can test the new function
# if(brickSetsPriced$pieces[i] > 2) {
tempPartsList <- dfr_peeronPartsList(brickSetsPriced$legoID[i])
if(length(tempPartsList) > 1) {
partsList <- rbind(tempPartsList, partsList)
}
print(paste("Getting set in row", i))
# }
}
length(table(partsList$SetID))
write.csv(partsList, "partsList.csv")
library(XML)
library(stringr)
View(peeronSets)
names(peeronSets) <- c("legoID", "name", "theme", "year", "pieces", "minifigs",
"msrp", "inventory", "instructions")
names(peeronSetsPriced) <- names(peeronSets)
matchedPrices <- merge(brickSetsPriced, peeronSetsPriced, by.x = "legoID", by.y = "legoID")
matchedSets <- as.data.frame(matchedPrices$legoID)
names(matchedSets) <- c("legoID")
matchedSets$matched <- TRUE
peeronSetsPriced <- merge(peeronSetsPriced, matchedSets, all.x = TRUE)
peeronSetsPricedNoPartsList <- subset(peeronSetsPriced, is.na(peeronSetsPriced$matched))
library(XML)
library(stringr)
View(peeronSetsPricedNoPartsList)
i <- 165
peeronSetsPricedNoPartsList$legoID(i)
peeronSetsPricedNoPartsList$legoID[i]
i <- 165
setIDString <- peeronSetsPricedNoPartsList$legoID[i]
setURL <- str_peeronPartsListURL(setIDString)
# Now pull the page into an R object
setPartsListPage <- readHTMLTable(setURL)
# Convert it to a data frame - the last table in the list should be what we want
setPartsList <- as.data.frame(setPartsListPage[length(setPartsListPage)])
View(setPartsList)
# if it's a valid setAdd the setNumber to the data frame
validSet <- (length(setPartsList) > 1 &
names(setPartsList)[1] != "NULL.V1")
setPartsList$SetID <- setIDString
# Use the function to clean the data frame
setPartsList <- dfr_cleanPeeronPartsList(setPartsList)
View(setPartsList)
for(i in 1:nrow(peeronSetsPricedNoPartsList)) {
tempPartsList <- dfr_peeronPartsList(peeronSetsPricedNoPartsList$legoID[i])
if(length(tempPartsList) > 1) {
partsList <- rbind(tempPartsList, partsList)
}
print(paste("Getting set in row", i))
}
rm(setPartsList, setPartsListPage, tempPartsList)
rm(i, setIDString, setURL, validSet)
names(peeronSets)
names(brickSetsPriced)
table(peeronSets$inventory)
table(peeronSets$instructions)
table(brickSets$instructionsCount)
names(peeronSets) <- c("legoID", "name", "theme", "year", "pieces", "minifigs",
"USRetailPrice", "inventory", "instructions")
names(peeronSetsPriced) <- names(peeronSets)
names(peeronSetsPricedNoPartsList) <- names(peeronSets)
peeronSets$instructions2 <- ifelse(peeronSets$instructions == "Yes", 1, 0)
library(gmodels)
?CrossTable
CrossTable(peeronSets$instructions, peeronSets$instructions2)
peeronSets$instructions <- ifelse(peeronSets$instructions == "Yes", 1, 0)
peeronSetsPriced$instructions <- ifelse(peeronSetsPriced$instructions == "Yes", 1, 0)
names(peeronSetsPriced) <- names(peeronSets)
matchedPrices <- merge(brickSetsPriced, peeronSetsPriced, by.x = "legoID", by.y = "legoID")
matchedSets <- as.data.frame(matchedPrices$legoID)
names(matchedSets) <- c("legoID")
matchedSets$matched <- TRUE
peeronSetsPriced <- merge(peeronSetsPriced, matchedSets, all.x = TRUE)
peeronSetsPricedNoPartsList <- subset(peeronSetsPriced, is.na(peeronSetsPriced$matched))
View(peeronSetsPriced)
View(peeronSets)
peeronSets$instructions2 <- NULL
peeronSetsPriced$instructions2 <- NULL
peeronSetsPricedNoPartsList$instructions2 <- NULL
missingVars <- NULL
for (i in 1:length(names(brickSets))) {
if(names(brickSets)[i] %in% names(peeronSets)) {
# do nothing
} else{
missingVars <- c(missingVars, names(brickSets)[i])
}
}
names(peeronSets) <- c(names(peeronSets), missingVars)
temp <- peeronSets
missingVars <- NULL
for (i in 1:length(names(brickSets))) {
if(names(brickSets)[i] %in% names(peeronSets)) {
# do nothing
} else {
peeronSets[, length(peeronSets) + 1] <- NA
names(peeronSets) <- c(names(peeronSets), names(brickSets[i])
}
for (i in 1:length(names(brickSets))) {
if(names(brickSets)[i] %in% names(peeronSets)) {
# do nothing
} else {
peeronSets[, length(peeronSets) + 1] <- NA
names(peeronSets) <- c(names(peeronSets), names(brickSets[i]))
}
}
peeronSets <- temp
for (i in 1:length(names(brickSets))) {
if(names(brickSets)[i] %in% names(peeronSets)) {
# do nothing
} else {
peeronSets[, length(peeronSets) + 1] <- NA
names(peeronSets)[length(peeronSets)] <- names(brickSets[i])
}
}
View(peeronSets)
View(brickSets)
names(brickSets)
names(brickSetsPriced)
table(brickSets$instructionsCount)
names(matchedPrices)
names(peeronSetsPricedNoPartsList) <- paste0(peeronSetsPricedNoPartsList, ".y")
names(peeronSetsPricedNoPartsList)
names(peeronSetsPricedNoPartsList) <- names(peeronSetsPriced)
names(peeronSetsPricedNoPartsList)
temp <- names(peeronSetsPricedNoPartsList)
temp <- paste0(temp, ".y")
temp
names(temp)[1] <- "legoID"
temp <- names(peeronSetsPricedNoPartsList)
temp <- paste0(temp, ".y")
temp[1] <- "legoID"
temp
names(peeronSetsPricedNoPartsList) <- temp
?intersect
temp <- setdiff(matchedPrices, peeronSetsPricedNoPartsList)
temp <- setdiff(names(matchedPrices), names(peeronSetsPricedNoPartsList))
match <- intersect(names(matchedPrices), names(peeronSetsPricedNoPartsList))
match
p_only <- setdiff(names(peeronSetsPricedNoPartsList), match)
View(peeronSetsPricedNoPartsList)
which(names(peeronSetsPricedNoPartsList)) == "instructions.y"
index(names(peeronSetsPricedNoPartsList)) == "instructions.y"
which(names(peeronSetsPricedNoPartsList) == "instructions.y")
names(peeronSetsPricedNoPartsList)[which(names(peeronSetsPricedNoPartsList) == "instructions.y")] <- "instructions"
names(peeronSetsPricedNoPartsList)[which(names(peeronSetsPricedNoPartsList) == "matched.y")] <- "matched"
names(peeronSetsPricedNoPartsList)[which(names(peeronSetsPricedNoPartsList) == "inventory.y")] <- "inventory"
temp <- setdiff(names(matchedPrices), names(peeronSetsPricedNoPartsList))
match <- intersect(names(matchedPrices), names(peeronSetsPricedNoPartsList))
p_only <- setdiff(names(peeronSetsPricedNoPartsList), match)
rm(p_only, match, temp)
rm(p_only, match, temp, missingVars, i)
rm(matchedSets)
temp <- setdiff(names(matchedPrices), names(peeronSetsPricedNoPartsList))
# now add each of those as a column
for(i in 1:length(temp)) {
peeronSetsPricedNoPartsList[, length(peeronSetsPricedNoPartsList) + 1] <- NA
names(peeronSetsPricedNoPartsList)[length(peeronSetsPricedNoPartsList)] <- temp[i]
}
names(peeronSetsPricedNoPartsList)
names(matchedPrices)
setdiff(names(peeronSetsPricedNoPartsList), names(matchedPrices))
peeronSetsPricedNoPartsList$matched <- NULL
peeronSetsPricedNoPartsList[names(matchedPrices)]
peeronSetsPricedNoPartsList <- peeronSetsPricedNoPartsList[names(matchedPrices)]
View(peeronSetsPricedNoPartsList)
pricedSets <- rbind(matchedPrices, peeronSetsPricedNoPartsList)
rm(matchedPrices, peeronSetsPricedNoPartsList, peeronSetsPriced)
rm(matchedPrices, peeronSetsPricedNoPartsList, peeronSetsPriced, brickSetsPriced)
rm(matchedPrices, peeronSetsPricedNoPartsList, peeronSetsPriced, brickSetsPriced, temp, i)
write.csv(pricedSets, "pricedSets.csv")
setsWithParts <- table(partsList$SetID)
setsWithParts <- data.frame(table(partsList$SetID))
names(setsWithParts) <- "SetID"
names(setsWithParts) <- "partsTypesCount"
setsWithParts$SetID <- row.names(setsWithParts)
View(setsWithParts)
setsWithParts <- data.frame(table(partsList$SetID))
View(setsWithParts)
names(setsWithParts) <- c("SetID", "partsTypesCount")
View(setsWithParts)
names(setsWithParts) <- c("setID", "partsTypesCount")
temp <- data.frame(pricedSets$setID)
View(temp)
names(setsWithParts) <- c("legoID", "partsTypesCount")
temp <- data.frame(pricedSets$legoID)
View(temp)
setsWithParts <- merge(setsWithParts, temp, all.x = TRUE)
setsWithParts <- data.frame(table(partsList$SetID))
names(setsWithParts) <- c("legoID", "partsTypesCount")
temp <- data.frame(pricedSets$legoID)
temp$priced <- TRUE
setsWithParts <- merge(setsWithParts, temp, by.x = "legoID", by.y = "legoID", all.x = TRUE)
View(temp)
temp <- data.frame(pricedSets$legoID)
names(temp) <- "legoID"
temp$priced <- TRUE
setsWithParts <- merge(setsWithParts, temp, all.x = TRUE)
View(setsWithParts)
sum(setsWithParts$priced, na.rm = TRUE) / nrow(setsWithParts) * 100
round(sum(setsWithParts$priced, na.rm = TRUE) / nrow(setsWithParts) * 100, 0)
rm(setsWithParts, temp)
names(pricedSets)
pricedSets$compname <- pricedSets$name.x == pricedSets$name.y
table(pricedSets$compname)
str(pricedSets)
pricedSets$compyear <- pricedSets$year.x == pricedSets$year.y
table(pricedSets$compyear)
pricedSets$compname <- NULL
pricedSets$X <- NULL
pricedSets$number <- NULL
pricedSets$numberVariant <- NULL
pricedSets$bricksetURL <- NULL
pricedSets$owned <- NULL
pricedSets$wanted <- NULL
pricedSets$qtyOwned <- NULL
pricedSets$userNotes <- NULL
pricedSets$ACMDataCount <- NULL
pricedSets$UKRetailPrice <- NULL
pricedSets$CARetailPrice <- NULL
pricedSets$theme.y <- NULL
pricedSets$EAN <- NULL
pricedSets$UPC <- NULL
names(pricedSets)
str(pricedSets)
pricedSets$EURetailPrice <- NULL
pricedSets$additionalImageCount <- NULL
pricedSets$imageFilename <- NULL
pricedSets$largeThumbnailURL <- NULL
pricedSets$thumbnailURL <- NULL
pricedSets$instructions2 <- NULL
pricedSets$instructions <- NULL
str(pricedSets)
pricedSets$comppcs <- pricedSets$pieces.x == pricedSets$pieces.y
table(pricedSets$comppcs)
pricedSets$image2 <- as.logical(toupper(pricedSets$image))
table(pricedSets$image2)
pricedSets$image2 <- NULL
pricedSets$image <- as.logical(toupper(pricedSets$image))
pricedSets$compmfgs <- pricedSets$minifigs.x == pricedSets$minifigs.y
table(pricedSets$compmfgs)
table(pricedSets$USRetailPrice.x)
table(!is.na(pricedSets$USRetailPrice.x))
table(!is.na(pricedSets$USRetailPrice.y))
str(pricedSets)
table(pricedSets$USRetailPrice.y != NA)
table(pricedSets$USRetailPrice.y != 0)
table(pricedSets$USRetailPrice.y != NaN)
table(pricedSets$USRetailPrice.y)
pricedSets$compprice <- pricedSets$USRetailPrice.x == pricedSets$USRetailPrice.y
table(pricedSets$compprice)
pricedSets$pricedifference <- pricedSets$USRetailPrice.x - pricedSets$USRetailPrice.y
table(pricedSets$pricedifference)
names(pricedSets)
pricedSets$pricedifference <- NULL
pricedSets$compprice <- NULL
write.csv(pricedSets, "pricedSets.csv")
library(ggplot2)
library(quantmod)
library(stringr)
ggplot(pricedSets, aes(x = pieces.x, y = USAdjustedPrice)) +
geom_point(shape = 1)
ggplot(pricedSets, aes(x = pieces.x, y = USAdjustedPrice)) +
geom_point(shape = 2)
ggplot(pricedSets, aes(x = pieces.x, y = USAdjustedPrice)) +
geom_point(shape = 3)
ggplot(pricedSets, aes(x = pieces.x, y = USAdjustedPrice)) +
geom_point(shape = 0) + # use hollow circles
geom_smooth(method = lm) # show an lm line
?lm
legoPricing <- pricedSets$USAdjustedPrice ~ pricedSets$year.x + pricedSets$theme.x + pricedSets$themeGroup + pricedSets$subtheme +
pricedSets$pieces.x + pricedSets$minifigs.x + pricedSets$USRetailPrice.x + pricedSets$CPI +
pricedSets$packagingType
legoPricing
summary(legoPricing)
print(legoPricing)
legoPricing <- lm(pricedSets$USAdjustedPrice ~ pricedSets$year.x + pricedSets$theme.x + pricedSets$themeGroup + pricedSets$subtheme +
pricedSets$pieces.x + pricedSets$minifigs.x + pricedSets$USRetailPrice.x + pricedSets$CPI +
pricedSets$packagingType)
summary(legoPricing)
legoPricing <- lm(pricedSets$USAdjustedPrice ~ pricedSets$year.x + pricedSets$theme.x + pricedSets$themeGroup + pricedSets$subtheme +
pricedSets$pieces.x + pricedSets$minifigs.x + pricedSets$CPI + pricedSets$packagingType)
summary(legoPricing)
hist(tapply(partsList$Qty, partsList$SetID, sum), breaks = 100)
hist(tapply(partsList$Qty, partsList$SetID, sum), breaks = 100, xlim = c(0,500))
